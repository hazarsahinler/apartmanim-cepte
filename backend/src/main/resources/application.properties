# Uygulama Adi
spring.application.name=backend

# Server Portu
server.port=8080


# ======================================================
# VER?TABANI BA?LANTISI (DataSource Yap?land?rmas?)
# Sildi?in config'deki DataSource @Bean'inin yerine geçer
# ======================================================
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# ======================================================
# JPA & HIBERNATE YAPILANDIRMASI
# Sildi?in config'deki SessionFactory ve TransactionManager @Bean'lerinin yerine geçer
# ======================================================

# Hibernate'in hangi SQL diyalektini kullanaca??n? belirtir.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# (ÖNER?) Hibernate'in Entity s?n?flar?na göre veritaban? ?emas?n? nas?l yönetece?ini belirtir.
# `update`: Eksik tablo veya kolonlar? ekler/günceller. Geli?tirme için idealdir.
# `validate`: Mevcut ?emay? kontrol eder, uyumsuzsa hata verir.
# `create`: Her ba?lang?çta veritaban?n? silip yeniden olu?turur. Testler için kullan??l?d?r.
# `none`: Hiçbir ?ey yapmaz. Canl? (production) ortamlar için en güvenlisidir.
spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:update} # docker-compose'dan "update" gelecek

# (ÖNER?) Çal??t?r?lan SQL sorgular?n? konsolda göstermek için. Geli?tirme s?ras?nda çok faydal?d?r.
spring.jpa.show-sql=true

# (ÖNER?) Gösterilen SQL'i daha okunakl? formatlamak için.
spring.jpa.properties.hibernate.format_sql=true

# (ÖNER?) Spring Boot'a Entity s?n?flar?n? nerede arayaca??n? söylemeye gerek yoktur.
# @SpringBootApplication anotasyonunun oldu?u paketi ve alt paketleri otomatik olarak tarar.
# Sildi?in config'deki "setPackagesToScan" sat?r?n?n yerine geçer.